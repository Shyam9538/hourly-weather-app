[{"/Users/shyam/my-app/src/index.js":"1","/Users/shyam/my-app/src/App.js":"2","/Users/shyam/my-app/src/components/Header.js":"3","/Users/shyam/my-app/src/components/Cover.js":"4","/Users/shyam/my-app/src/components/Hourly.js":"5"},{"size":175,"mtime":1667568333784,"results":"6","hashOfConfig":"7"},{"size":9987,"mtime":1667679109407,"results":"8","hashOfConfig":"7"},{"size":657,"mtime":1667678129284,"results":"9","hashOfConfig":"7"},{"size":574,"mtime":1647988375529,"results":"10","hashOfConfig":"7"},{"size":2014,"mtime":1647988376516,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"10573n8",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"15"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"15"},"/Users/shyam/my-app/src/index.js",[],[],["32","33"],"/Users/shyam/my-app/src/App.js",["34","35","36"],[],"import Header from './components/Header';\nimport Cover from './components/Cover';\nimport Hourly from './components/Hourly';\nimport \"weather-icons/css/weather-icons.css\";\nimport React from 'react';\nimport './index.css'\n\n\n\n \nconst apiKey=\"99b18679f80c7f3071e7cadc69fd777f\";\n\n\n\n//There is a class here with a constructor, where the variables are decalared and set to undefined.\nclass App extends React.Component{\n    \n    constructor(){\n        super();\n        this.state={\n            city:undefined,\n            country: undefined,\n            icon:undefined,\n            icon1:undefined,\n            main:undefined,\n            celcius:undefined,\n            temp_max:undefined,\n            temp_min:undefined,\n            uv:undefined,\n            cover:undefined,\n            description:\"\",\n            description2:\"\",\n            description3:\"\",\n            error:false,\n            dt:undefined,\n            city: \"London\",\n            lat:undefined,\n            lng:undefined,\n            hourly:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]\n        };\n        \n        \n        this.onInputchange = this.onInputchange.bind(this);\n        this.onSubmitForm = this.onSubmitForm.bind(this);\n       \n        \n        // console.log(this.state)\n        //     if (!typeof this.state.lat===\"undefined\"){\n        //     this.getWeather2(this.state.lat, this.state.long);\n        // }\n\n\n\n        this.weatherIcon = {\n            Thunderstorm: \"wi-thunderstorm\",\n            Drizzle: \"wi-sleet\",\n            Rain : \"wi-storm-showers\",\n            Snow: \"wi-snow\",\n            Atmosphere : \"wi-fog\",\n            Clear : \"wi-day-sunny\",\n            Clouds: \"wi-day-fog\"            \n           };\n        \n        this.intensity = {\n            Low: \"Low\",\n            Medium: \"Medium\",\n            High: \"High\",\n            VeryHigh: \"High\",\n            Unknown: \"Unknown\"\n        }\n\n   \n    }\n\n//This method here calls the getWeather method.\n  componentDidMount(){\n      this.getWeather();\n      console.log(this.state)\n  }\n\n  //This method allows the state to be changed.\n  onInputchange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  //This method call the getWeather method on the form submit.\n  onSubmitForm() {\n    console.log(this.state)\n    this.getWeather();\n  }\n\n  \n    \n    //This method here allows for kelvin data provided by the API into celcius. \n    calCelsius(temp){\n        let cell = Math.floor(temp - 273.15);\n        return cell;\n       }\n\n    //This method here allow for the cloud cover data to be converted into text values like low medium and high using a switch and cases.\n    cloudCover(cover){\n        switch (true) {\n            case cover >= 0 && cover < 33:\n                this.setState({ description2: this.intensity.Low});\n                break;\n            case cover >= 33 && cover < 66:\n                this.setState({ description2: this.intensity.Medium });\n                break;\n            case cover >= 66 && cover <= 100:\n                this.setState({ description2: this.intensity.High });\n                break;\n            default:\n                this.setState({description2: this.intensity.Unknown});\n       }\n    }\n\n    //This method here allows for the UV intensity to be converted from a number into a value using a switch and case statements. \n    uvIntensity(uvIntense){\n        switch (true) {\n            case uvIntense >= 0 && uvIntense < 2:\n                this.setState({ description3: this.intensity.Low});\n                break;\n            case uvIntense >= 2 && uvIntense <= 7:\n                this.setState({ description3: this.intensity.Medium });\n                break;\n            case uvIntense >= 7 && uvIntense < 11:\n                this.setState({ description3: this.intensity.High });\n                break;\n            case uvIntense > 11:\n                this.setState({ description3: this.intensity.VeryHigh });\n                break;\n            default:\n                this.setState({description3: this.intensity.Unknown});\n       }\n    }\n       \n    //This method here allows for the weather icon to be decided based on the rangeid of the method.\n    get_WeatherIcon(icons, rangeId) {\n        switch (true) {\n            case rangeId >= 200 && rangeId <= 232:\n                this.setState({ icon: this.weatherIcon.Thunderstorm});\n                break;\n            case rangeId >= 300 && rangeId <= 321:\n                this.setState({ icon: this.weatherIcon.Drizzle});\n                break;\n            case rangeId >= 500 && rangeId <= 531:\n                this.setState({ icon: this.weatherIcon.Rain });\n                break;\n            case rangeId >= 600 && rangeId <= 622:\n                this.setState({icon: this.weatherIcon.Snow});\n                break;\n            case rangeId >= 701 && rangeId <= 781:\n                this.setState({icon: this.weatherIcon.Atmosphere});\n                break;\n            case rangeId === 800:\n                this.setState({icon: this.weatherIcon.Clear});\n                break;\n            case rangeId >= 801 && rangeId <= 804:\n                this.setState({icon: this.weatherIcon.Clouds});\n                break;\n            default:\n                this.setState({icon: this.weatherIcon.Clouds});\n        }\n    }\n\n    //These methods here allow for the calculations to be made, such as deciding which icon to display based on the id of the weather, or displaying the levels of cloud cover or uv.\n    hourTemp(rangeId){\n        for (let index = 1; index < 24; index++) {\n            switch (true) {\n                case rangeId >= 200 && rangeId <= 232:\n                    return this.weatherIcon.Thunderstorm\n                case rangeId >= 300 && rangeId <= 321:\n                    return this.weatherIcon.Drizzle\n                case rangeId >= 500 && rangeId <= 531:\n                    return this.weatherIcon.Rain\n                case rangeId >= 600 && rangeId <= 622:\n                    return this.weatherIcon.Snow\n                case rangeId >= 701 && rangeId <= 781:\n                    return this.weatherIcon.Atmosphere\n                case rangeId === 800:\n                    return this.weatherIcon.Clear\n                case rangeId >= 801 && rangeId <= 804:\n                    return this.weatherIcon.Clouds;\n                default:\n                    return this.weatherIcon.Clouds;\n            }\n        }\n    }\n\n\n    //This method fetches the data from the API call cand then sets it to the variable in the constructor, which initialises it.\n    getWeather=async(props)=>{\n        const apiCall= await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&appid=${apiKey}`);\n        const response= await apiCall.json().then((response)=>{\n            this.setState({\n                city : response.name,\n                country: response.sys.country,\n                temp_max: this.calCelsius(response.main.temp_max),\n                temp_min: this.calCelsius(response.main.temp_min),\n                description: response.weather[0].description,\n                lat:response.coord.lat,\n                lng:response.coord.lon\n                \n                \n               });\n            this.getWeather2(response.coord.lat, response.coord.lon)\n            this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n\n        })\n        \n            console.log(\"BLAH\");\n           console.log(this.state.lat)\n           this.setState();\n           \n    };\n\n    //This method fetches the data from the second API call and sets the value to the variable in the constructor, which initialises it.\n    getWeather2=async(lat1, long1)=>{\n        console.log(long1, lat1)\n\n        const apiCall2= await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat1}&lon=${long1}&exclude=minutely,daily&appid=${apiKey}`);\n        const response2= await apiCall2.json();\n        console.log(this.response2)\n        this.setState({\n            hourly:response2.hourly.slice(0,24)\n        });\n        console.log(this.state)\n           this.uvIntensity(response2.current.uvi)\n           this.cloudCover(response2.current.clouds)\n           this.hourTemp(response2.hourly[0].weather[0].id);\n           \n    };\n\n    //The render here allows for the variables to be used in the other components, and this data is passed through these variables.\n    render(){\n        return(\n            \n            <div className='App'> \n            <form className='form1'>\n             \n            <h1 className='cityName h1 mainTitle'>Hourly Weather Forecast App</h1>\n            <p className='cityName h1'><h1>Please enter a city below:</h1></p>\n            <input className='input' type=\"text\"\n            name=\"city\"\n            value={this.state.city}\n            onChange={this.onInputchange}\n          />\n      </form>\n      <br></br>\n      <button className='button2 btn btn-outline-light' onClick={() => {\n          this.onSubmitForm();\n          document.getElementById('middle').scrollIntoView(true)\n        }} placeholder=\"Please enter a city\">Submit</button>\n      <script>\n      \n      \n\n</script>  \n      <h1 id=\"middle\"></h1>\n            <Header\n            city={this.state.city} \n            country={this.state.country}\n            temp_max={this.state.temp_max}\n            temp_min={this.state.temp_min}\n            description={this.state.description}\n            weatherIcon={this.state.icon}\n            />\n            <Cover \n            uv={this.state.uv}\n            description2={this.state.description2}\n            description3={this.state.description3}\n            cover={this.state.cover}\n            />\n\n            <Hourly\n            hourly={this.state.hourly}\n            weatherIcon={this.state.icon1}\n            dt={this.state.dt}\n            hourTemp={this.hourTemp}\n            lat={this.state.lat}\n            lng={this.state.lng}\n            />\n            \n        </div> \n        );\n    }\n}\n\n\nexport default App;","/Users/shyam/my-app/src/components/Header.js",["37"],[],"var d = new Date();\nconst Header = (props) => {\n  return (\n    <header>\n    <h1 className=\"cityName h1\">{props.city}, {props.country}</h1>\n    <div className=\"sectionOne\">\n    <i className={`logo wi ${props.weatherIcon} display-1`}></i>\n    <h2 className=\"caps h2\">{props.description}</h2>\n    </div>\n    <div className=\"sectionOne\">\n    <h1 className=\"temp h1\">Maximum Temperature:</h1>\n    <h1 className=\"h1\">{props.temp_max}&deg;</h1>\n    </div>\n    <div className=\"sectionOne\">\n    <h1 className=\"temp h1\">Minimum Temperature:</h1>\n    <h1 className=\"h1\">{props.temp_min}&deg;</h1>\n    </div>\n    <hr></hr>\n \n\n\n    </header>\n  )\n}\n\nexport default Header","/Users/shyam/my-app/src/components/Cover.js",["38"],[],"var d = new Date();\nconst Cover = (props) => {\n  return (\n    <div>\n    <div className=\"uv\">\n    <div className=\"test\">\n    <i className=\"logo1 wi wi-day-sunny display-1\"></i>\n    </div>\n    <h1 className=\"text h1\">UV Index:</h1>\n    <h1 className=\"text h1\">{props.description3}</h1>\n    </div>\n\n    <div className=\"vertical-row\"></div>\n\n    <div className=\"cloud\">\n    <i className=\"logo2 wi wi-cloud \"></i>\n    <h1 className=\"text h1\">Cloud Cover:</h1>\n    <h1 className=\"text h1\">{props.description2}</h1>\n    </div>\n    <hr></hr>\n\n\n    </div>\n  )\n}\n\nexport default Cover","/Users/shyam/my-app/src/components/Hourly.js",["39","40","41"],[],"import { useEffect } from \"react\";\n\nvar d = new Date();\nconst Hourly = (props) => {\n    const weatherIcon = {\n        Thunderstorm: \"wi-thunderstorm\",\n        Drizzle: \"wi-sleet\",\n        Rain : \"wi-storm-showers\",\n        Snow: \"wi-snow\",\n        Atmosphere : \"wi-fog\",\n        Clear : \"wi-day-sunny\",\n        Clouds: \"wi-day-fog\"            \n       };\n\n    function checkIcon(rangeId) {\n            for (let index = 1; index < 24; index++) {\n                switch (true) {\n                    case rangeId >= 200 && rangeId <= 232:\n                        return weatherIcon.Thunderstorm\n                    case rangeId >= 300 && rangeId <= 321:\n                        return weatherIcon.Drizzle\n                    case rangeId >= 500 && rangeId <= 531:\n                        return weatherIcon.Rain\n                    case rangeId >= 600 && rangeId <= 622:\n                        return weatherIcon.Snow\n                    case rangeId >= 701 && rangeId <= 781:\n                        return weatherIcon.Atmosphere\n                    case rangeId == 800:\n                        return weatherIcon.Clear\n                    case rangeId >= 801 && rangeId <= 804:\n                        return weatherIcon.Clouds;\n                    default:\n                        return weatherIcon.Clouds;\n            }\n        }\n    }\n  return (\n    <div className=\"hourly\">\n    <h1 className=\"h1\">Hourly Forecast</h1>\n    <br></br>\n    {\n        props.hourly.map((hour, index) => {\n           return( <div className=\"row\">\n                <h2 className=\"left h2\">{new Date(hour.dt * 1000).getHours() + \":00\"}</h2>\n                {\n                    hour.weather ? <i className={\"wi \" + checkIcon(hour.weather[0].id) + \" display-1 middle\"}></i> : ''\n                }\n                {\n                    hour.temp ? <h2 className=\"right h2\">{Math.floor(hour.temp - 273.15)}&deg;</h2> : ''\n                }\n            </div>)\n        })\n    }\n    \n\n  \n    <br></br>\n    </div>\n  )\n}\n\nexport default Hourly",{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":36,"column":13,"nodeType":"48","messageId":"49","endLine":36,"endColumn":17},{"ruleId":"50","severity":1,"message":"51","line":196,"column":15,"nodeType":"52","messageId":"53","endLine":196,"endColumn":23},{"ruleId":"54","severity":1,"message":"55","line":261,"column":7,"nodeType":"56","endLine":261,"endColumn":23},{"ruleId":"50","severity":1,"message":"57","line":1,"column":5,"nodeType":"52","messageId":"53","endLine":1,"endColumn":6},{"ruleId":"50","severity":1,"message":"57","line":1,"column":5,"nodeType":"52","messageId":"53","endLine":1,"endColumn":6},{"ruleId":"50","severity":1,"message":"58","line":1,"column":10,"nodeType":"52","messageId":"53","endLine":1,"endColumn":19},{"ruleId":"50","severity":1,"message":"57","line":3,"column":5,"nodeType":"52","messageId":"53","endLine":3,"endColumn":6},{"ruleId":"59","severity":1,"message":"60","line":28,"column":34,"nodeType":"61","messageId":"49","endLine":28,"endColumn":36},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"no-dupe-keys","Duplicate key 'city'.","ObjectExpression","unexpected","no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'d' is assigned a value but never used.","'useEffect' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","no-global-assign","no-unsafe-negation"]